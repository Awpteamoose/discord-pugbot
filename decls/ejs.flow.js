/**
 * Flowtype definitions for ejs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare module "ejs" {
	declare type Data = {
		[name: string]: any
	};

	declare type Dependencies = string[];


	declare var localsName: string;

	declare function resolveInclude(name: string, filename: string): string

	declare type RenderFileCallback<T>= (err: Error, str?: string) => T;

	declare function renderFile<T>(path: string, cb: RenderFileCallback<T>): T

	declare function clearCache(): any

	declare interface TemplateFunction {
		(data: Data): any
	}

	declare interface Options {
		cache?: any,
			filename?: string,
			context?: any,
			compileDebug?: boolean,
			client?: boolean,
			delimiter?: string,
			debug?: any,
			_with?: boolean
	}

	declare function render(template: string, data?: Data, opts?: Options): string

	declare function compile(template: string, opts?: Options): (TemplateFunction)

	declare class Template {
		constructor(text: string, opts: Options): this;
		opts: Options;
		templateText: string;
		mode: string;
		truncate: boolean;
		currentLine: number;
		source: string;
		dependencies: Dependencies;
		createRegex(): RegExp;
		compile(): TemplateFunction;
		generateSource(): any;
		parseTemplateText(): string[];
		scanLine(line: string): any
	}

	declare interface Template$MODES {
		EVAL: string,
			ESCAPED: string,
			RAW: string,
			COMMENT: string,
			LITERAL: string
	}

	declare function escapeRegexChars(s: string): string

	declare function escapeXML(markup: string): string

	declare function shallowCopy<T1>(to: T1, fro: any): T1

	declare interface Cache {
		_data: {
				[name: string]: any
			},
			set(key: string, val: any): any,
			get(key: string): any
	}

	declare var cache: Cache;

	declare function resolve(from1: string, to: string): string

	declare function normalize(path: string): string

	declare function isAbsolute(path: string): boolean

	declare function join(...args: string[]): string

	declare function relative(from: string, to: string): string

	declare var sep: string;

	declare var delimiter: string;

	declare function dirname(path: string): string

	declare function basename(path: string): string

	declare function extname(path: string): string

	declare function filter(xs: any, f: any): any;

	declare var npm$namespace$Ejs: {
		resolveInclude: typeof resolveInclude,
		compile: typeof compile,
		render: typeof render,
		renderFile: typeof renderFile,
		clearCache: typeof clearCache,
		escapeRegexChars: typeof escapeRegexChars,
		escapeXML: typeof escapeXML,
		shallowCopy: typeof shallowCopy,
		resolve: typeof resolve,
		normalize: typeof normalize,
		isAbsolute: typeof isAbsolute,
		join: typeof join,
		relative: typeof relative,
		dirname: typeof dirname,
		basename: typeof basename,
		extname: typeof extname,
		filter: typeof filter,
	}
}
